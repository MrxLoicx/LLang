// Инкремент
def inc(num) => -(~num)
// Декремент
def dec(num) => ~(-num)

def min(x,y) => (x > y) ? y : x 
def max(x,y) => (x > y) ? x : y

// Равны ли числа по знаку
def equalSign(x, y) => (x ^ y) >= 0

// Абсолютное значение числа(Только для целых чисел)
def absi(x) => (x ^ (x >> 31)) - (x >> 31)

// Равны ли 2 числа
def equal(x,y) => (x ^ y) == 0

// Меняет знак числа на противоположный
def switchSign(number) => ~number + 1

// Является ли число четным
def IsEven(x) => (x & 1) == 1
// Перевод из радиан в градусы и наоборот
def degToRad(x) => x * PI / 180
def radToDeg(x) => x * 180 / PI

// Кол-во цифр в числе
def DigitsCount(n) => (n == 0) ? 1 : (int) log10(abs(n)) + 1

// Универсальная ф-ия вычисления степени m числа n
def pow(n,m) => exp(ln(n) * m)
// Корень кубический из числа
def cbrt(num) => pow(num, 1/3) 
// Корень 4-й степени из числа
def tqrt(num) => pow(num, 1/4)

// Является ли число положительным
def isPositive(number) {
    if (number == 0) return false
    return ((number >> 31) & 1) == 0
}

// Сложение чисел(только для int)
def add (a, b) {
   do {
     let x = a & b
     let y = a ^ b
     a = x << 1
     b = y
   } while(a)
  return b
}
// Вычитание чисел(только для int)
def sub(a, b) => add(a, add(~b, 1))
// Вычисляет корень квадратный(только для чисел int)
def root(n) {
   let i = 1
   let count = 0
   while (sub(n,i) >= 0) {
       n = sub(n,i)
       count = add(count, 1)
       i = add(i,2)
   }
  return count
}

// Быстрый алгоритм вычисления квадратного корня(только для чисел int32 и int64)
def rootLong(a) {
    let i = 0
    let n = 1
    while(a - n >= 0) {
       a = a - n
       n = n + 2
       i = ++i
    }
   return i
}

// Алгоритм вычисления квадратного корня с помощью побитовых операторов(только для типов int)
def broot(x) {
   let ans = 0
   let tmp = 0
   let local_mask = 0b11
   let mask = 0
   
   for (let i = 3; i >= 0; i = --i) {
       mask = mask | (local_mask << (2 * i))
       tmp = x & mask
       ans = ans ^ (1 << i)
       if (tmp < (ans * ans)) {
            ans = ans ^ (1 << i)
       }
   }
  return ans
}

// Быстрое возведение в степень
def Power(x, n) {
    let result = 1
    while (n > 0) {
       if ((n & 1) == 0) {
           x = x * x
           n = n >> 1
       } else {
          result = result * x
          n = --n
       }
    }
   return result
}

// Функция ошибки
// @type x = double
// @return double
// @test erf(0.01) = 0.0112834772 erf(3.7) = 0.9999998325
def erf(x) {
  const a1 = 0.254829592
  const a2 = -0.284496736
  const a3 = 1.421413741
  const a4 = -1.453152027
  const a5 = 1.061405429
  const p = 0.3275911

  let sign = 1
  if (x < 0) sign = -1
  x = abs(x)
  
  let t = 1.0 / (1.0 + p*x)
  let y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1) * t * exp(-x*x)
 
  return sign*y
}

def factorial(num) {
    let m = 1
    for (let z = 1; z <= num; z = ++z) m = m * z
    return m
}

// Функция Эйлера
def phi(n) {
    let result = n
    for (let i = 2; i * i <= n; i = ++i) {
        if (n % i == 0) {
            while(n % i == 0) n = n / i
            result = result - (result / i)
        }
    }
   if (n > 1) result = result - (result / n)
   return result
}

def sign(x) {
   return (x<0) ? -1 : ((x>0) ? 1: 0)
}

def arcsec(x) => arctan(x / sqrt(x*x-1))

def @arcsin(x) {
     if (x == -1 || x == 1) return PI/2*x
     return arctan(x/sqrt(1-x*x))
}

def @arccos(x) {
    if (x == 0) return 0
    return PI / 2 - @arcsin(x)
}

def arccotan(x) => arctan(x) + PI/2

def @sinh(x) {
   let t = exp(x)
   return (t-1/t) / 2
}

def @cosh(x) {
   let t = exp(x)
   return (t+1/t) / 2
}

def @tanh(x) {
   let t = exp(x+x)-1
   return t/(t+2)
}

// Hyperbolic secant
def @sech(x) {
   let t = exp(x)
   return 2/(t+1/t)
}
// Hyperbolic cosecant
def @cosech(x) {
   let t = exp(x)
   return 2/(t-1/t)
}
// Hyperbolic cotangent
def @coth(x) {
   let t = exp(x+x)
   return (t+2)/t
}

// Gudermannian
def gudermann(x) => 2 * (arctan(exp(x)) - arctan(1))

// Треугольные числа
def triangular(x) {
   let xx = (int)x
   x = x * (x+1)/2
   if (x == xx) return xx
   return x
}

// 'Triangle root' of x
def trirt(x) {
   let xx = (int)x
   x = (sqrt(1+8*x)-1)/2
   if (x == xx) x = xx
   return x
}

// Workhorse for following 2 functions
def tri_step_(t,s) {
   let tt = (int)t
   t = t + (1 + s * sqrt(1 + 8 * t)) / 2
   if (tt == t) return tt
   return t
}

def tri_succ(t) => tri_step_(t, 0 + 1)
def tri_pred(t) => tri_step_(t, 0 - 1)

// the xth s-gonal number:
// e.g. poly(3,4) = triangular(4) = 1+2+3+4 = 10
// poly(4,x) = x*x
def poly(s,x) {
   let xx = (int)x
   x = x * ((s/2-1)*(x-1)+1)
   if (x == xx) x = xx
   return x
}

// inverse of the above = polygonal root:
// e.g. inverse_poly(3,x)=trirt(x); inverse_poly(4,x)=sqrt(x), etc
def inverse_poly(s,r) {
   let xx = (int)r
   s = s - 2
   let t = s - 2
   r = (sqrt(8*s*r+t*t)+t)/s/2
   if (r == xx) r = xx
   return r
}

// converse of poly(); solves poly(s,x)=r for s
//  i.e. if the xth polygonal number is r, how many sides has the polygon?
//  e.g. if the 5th polygonal number is 15, converse_poly(5,15) = 3
//    so the polygon must have 3 sides! (15 is the 5th triangular number)
def converse_poly(x,r) {
   let xx = (int)x
   x = 2*((r/x-1)/(x-1)+1)
   if (x == xx) x = xx
   return x
}

// tetrahedral number
def tet(n) => n*(n+1)*(n+2)/6

def gamma(x) => factorial(x-1)
def beta(x,y) => factorial(x-1) * factorial(y-1) / factorial(x+y-1)